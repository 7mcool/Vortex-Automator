#!/usr/bin/env python3
"""
üå™Ô∏è Vortex-Automator - Setup Wizard (v3.0)
Interactive + Auto mode + Validation + Multi-Channel
"""

import os, sys, yaml, json, shutil, re, requests
from datetime import datetime
from pathlib import Path

class Colors:
    HEADER = '\033[95m'
    OK = '\033[92m'
    WARN = '\033[93m'
    FAIL = '\033[91m'
    END = '\033[0m'
    BOLD = '\033[1m'

STATE_FILE = '.setup_state.json'
CHANNEL_TEMPLATE = "config/channels/channel_template.yaml"

def save_state(step: str, data: dict):
    """Sauvegarde la progression avec v√©rification de l'√©tat"""
    state = {}
    if Path(STATE_FILE).exists():
        try:
            with open(STATE_FILE, 'r') as f:
                state = json.load(f)
        except json.JSONDecodeError:
            state = {}
    
    state[step] = data
    with open(STATE_FILE, 'w') as f:
        json.dump(state, f, indent=2)

def load_state(step: str):
    """Reprend la configuration depuis l'√©tape sauvegard√©e"""
    if not Path(STATE_FILE).exists():
        return {}
    
    try:
        with open(STATE_FILE, 'r') as f:
            state = json.load(f)
            return state.get(step, {})
    except (json.JSONDecodeError, FileNotFoundError):
        return {}

def validate_deepseek_key(key: str) -> bool:
    """V√©rifie la validit√© de la cl√© DeepSeek avec timeout"""
    try:
        headers = {"Authorization": f"Bearer {key}"}
        r = requests.get("https://api.deepseek.com/v1/models", headers=headers, timeout=10)
        return r.status_code == 200
    except requests.RequestException:
        return False

def validate_youtube_id(channel_id: str) -> bool:
    """V√©rifie le format des ID YouTube"""
    return re.match(r'^UC[\w-]{22}$', channel_id) is not None

def validate_directory(path: str) -> bool:
    """V√©rifie si le chemin est un dossier accessible"""
    try:
        return Path(path).is_dir() and os.access(path, os.R_OK | os.W_OK)
    except OSError:
        return False

def configure_global_settings(auto_mode: bool = False) -> dict:
    """Configuration globale avec validation am√©lior√©e"""
    if (saved := load_state("global")):
        print(f"{Colors.OK}Configuration globale charg√©e depuis la sauvegarde{Colors.END}")
        return saved

    print(f"\n{Colors.HEADER}üåç Configuration Globale{Colors.END}")

    config = {
        'default_source_dir': "./videos",
        'whisper_model': "medium",
        'deepseek_api_key': os.getenv("DEEPSEEK_API_KEY", ""),
        'publish_hours': [9, 12, 15, 18, 21],
        'log_retention_days': 30,
    }

    if not auto_mode:
        config.update({
            'default_source_dir': input("üìÅ Dossier source des vid√©os [./videos]: ") or "./videos",
            'whisper_model': input("üé§ Mod√®le Whisper (base/small/medium/large) [medium]: ") or "medium",
            'deepseek_api_key': input("üß† Cl√© DeepSeek: "),
            'log_retention_days': int(input("üìÜ Jours de r√©tention des logs [30]: ") or 30),
        })

    # Validation des entr√©es
    if not validate_deepseek_key(config['deepseek_api_key']):
        print(f"{Colors.FAIL}‚ùå Cl√© DeepSeek invalide ! V√©rifiez la cl√© et r√©essayez.{Colors.END}")
        sys.exit(1)
    
    if not validate_directory(config['default_source_dir']):
        print(f"{Colors.WARN}‚ö†Ô∏è Le dossier source n'existe pas. Cr√©ation...{Colors.END}")
        Path(config['default_source_dir']).mkdir(parents=True, exist_ok=True)

    save_state("global", config)
    return config

def configure_channel(channel_index: int, auto_mode: bool = False) -> dict:
    """Configure une cha√Æne YouTube avec validation"""
    print(f"\n{Colors.HEADER}üì∫ Configuration de la Cha√Æne #{channel_index}{Colors.END}")
    
    channel = {
        'name': f"Cha√Æne {channel_index}",
        'channel_id': "UCXXXXXXXXXXXXXXXXXXXXXX",  # Placeholder
        'token_file': f"token_channel_{channel_index}.json",
        'daily_limit': 3
    }

    if not auto_mode:
        channel.update({
            'name': input("üî§ Nom de la cha√Æne: "),
            'channel_id': input("üÜî ID de la cha√Æne (commence par UC...): "),
            'token_file': input("üîë Nom du fichier token [token_channel.json]: ") or "token_channel.json",
            'daily_limit': int(input("üî¢ Nombre de vid√©os par jour [3]: ") or 3)
        })

    # Validation de l'ID YouTube
    if not validate_youtube_id(channel['channel_id']):
        print(f"{Colors.FAIL}‚ùå Format d'ID YouTube invalide ! Doit commencer par UC et faire 24 caract√®res.{Colors.END}")
        sys.exit(1)

    # Options avanc√©es
    if not auto_mode and input("‚öôÔ∏è Configurer des options avanc√©es? (y/n): ").lower() == 'y':
        channel.update({
            'source_dir': input("üìÅ Dossier source sp√©cifique (laisser vide pour utiliser le global): ") or None,
            'done_dir': input("üìÅ Dossier pour vid√©os trait√©es [done_videos]: ") or "done_videos",
            'error_dir': input("üìÅ Dossier pour vid√©os en √©chec [failed_uploads]: ") or "failed_uploads",
            'category_id': input("üè∑Ô∏è Cat√©gorie YouTube [27=√âducation]: ") or "27",
            'default_language': input("üåê Langue par d√©faut [fr]: ") or "fr"
        })

    return channel

def setup_google_auth():
    """Guide l'utilisateur pour l'authentification Google"""
    print(f"\n{Colors.HEADER}üîê Configuration de l'Authentification Google{Colors.END}")
    print(f"{Colors.BOLD}√âTAPES REQUISES:{Colors.END}")
    print("1. Allez sur https://console.cloud.google.com/")
    print("2. Cr√©ez un projet et activez l'API YouTube Data v3")
    print("3. Configurez l'√©cran de consentement OAuth")
    print("4. Cr√©ez des identifiants OAuth 2.0 (Type: Application bureautique)")
    print("5. T√©l√©chargez le fichier client_secret.json")
    print(f"\n{Colors.WARN}‚ö†Ô∏è Placez le fichier t√©l√©charg√© dans le dossier 'auth/' avant de continuer{Colors.END}")
    input("\nAppuyez sur Entr√©e quand c'est fait...")

    # V√©rification basique
    if not Path("auth/client_secret.json").exists():
        print(f"{Colors.FAIL}‚ùå Fichier client_secret.json introuvable !{Colors.END}")
        return False
    return True

def create_initial_state(channels: list):
    """Cr√©e le fichier d'√©tat initial avec les cha√Ænes"""
    state = {
        "last_processed_date": datetime.utcnow().strftime("%Y-%m-%d"),
        "channel_dates": {channel['channel_id']: {} for channel in channels}
    }
    with open('publishing_state.json', 'w') as f:
        json.dump(state, f, indent=2)

def generate_channel_template(channel_config: dict):
    """Cr√©e un template de configuration de cha√Æne"""
    with open(CHANNEL_TEMPLATE, 'w') as f:
        yaml.dump(channel_config, f, sort_keys=False)
    print(f"{Colors.OK}‚úì Template de cha√Æne cr√©√©: {CHANNEL_TEMPLATE}{Colors.END}")

def rollback():
    """Supprime les fichiers cr√©√©s en cas d'erreur"""
    for path in [
        "config/app_config.yaml",
        "publishing_state.json",
        STATE_FILE,
        CHANNEL_TEMPLATE
    ] + list(Path("config/channels").glob("channel_*.yaml")):
        try:
            Path(path).unlink(missing_ok=True)
        except OSError as e:
            print(f"{Colors.WARN}‚ö†Ô∏è Erreur suppression {path}: {e}{Colors.END}")
    
    print(f"{Colors.WARN}‚ö†Ô∏è Configuration annul√©e - Fichiers supprim√©s{Colors.END}")

def main():
    parser = argparse.ArgumentParser(description="Assistant de configuration pour Vortex-Automator")
    parser.add_argument("--auto", action="store_true", help="Mode non-interactif avec valeurs par d√©faut")
    parser.add_argument("--channels", type=int, default=1, help="Nombre de cha√Ænes √† configurer (mode auto)")
    args = parser.parse_args()

    try:
        # Cr√©ation des dossiers de base
        Path("config/channels").mkdir(parents=True, exist_ok=True)
        Path("auth").mkdir(exist_ok=True)
        
        # Configuration globale
        global_config = configure_global_settings(args.auto)
        with open('config/app_config.yaml', 'w') as f:
            yaml.dump(global_config, f, sort_keys=False)

        # Configuration des cha√Ænes
        channels = []
        channel_count = args.channels if args.auto else int(input("\nNombre de cha√Ænes √† configurer: ") or 1)
        
        for i in range(channel_count):
            channel = configure_channel(i+1, args.auto)
            channel_filename = f"config/channels/channel_{i+1}.yaml"
            with open(channel_filename, 'w') as f:
                yaml.dump(channel, f, sort_keys=False)
            channels.append(channel)
        
        # Cr√©er un template pour les nouvelles cha√Ænes
        generate_channel_template(channels[0])

        # Authentification Google
        if not args.auto and not setup_google_auth():
            print(f"{Colors.FAIL}‚ùå Authentification requise !{Colors.END}")
            rollback()
            sys.exit(1)

        # Initialisation de l'√©tat de publication
        create_initial_state(channels)

        # Cr√©ation des dossiers suppl√©mentaires
        for folder in ["logs", "done_videos", "failed_uploads", "temp"]:
            Path(folder).mkdir(exist_ok=True)

        print(f"\n{Colors.OK}{Colors.BOLD}‚úÖ Configuration termin√©e avec succ√®s !{Colors.END}")
        print(f"Prochaines √©tapes:")
        print(f"1. Authentifiez vos cha√Ænes avec: {Colors.BOLD}python src/main.py --authenticate{Colors.END}")
        print(f"2. Lancez l'automatisation: {Colors.BOLD}python src/main.py{Colors.END}")

    except Exception as e:
        print(f"{Colors.FAIL}‚ùå Erreur critique: {e}{Colors.END}")
        rollback()
        sys.exit(1)
    except KeyboardInterrupt:
        rollback()
        print(f"{Colors.WARN}‚ö†Ô∏è Configuration annul√©e par l'utilisateur{Colors.END}")
        sys.exit(0)

if __name__ == "__main__":
    import argparse
    main()