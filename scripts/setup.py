#!/usr/bin/env python3
"""
Vortex-Automator - Assistant de Configuration Compl√®te
"""

import os
import sys
import yaml
import json
import shutil
from datetime import datetime

# Configuration des couleurs pour le terminal
class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def clear_screen():
    """Efface l'√©cran du terminal"""
    os.system('cls' if os.name == 'nt' else 'clear')

def print_header():
    """Affiche l'en-t√™te du programme"""
    clear_screen()
    print(f"{bcolors.HEADER}{bcolors.BOLD}")
    print("=" * 60)
    print("‚öôÔ∏è VORTEX-AUTOMATOR - CONFIGURATION COMPL√àTE")
    print("=" * 60)
    print(f"{bcolors.ENDC}")

def create_directory_structure():
    """Cr√©e la structure de dossiers n√©cessaire"""
    dirs = [
        'config/channels',
        'auth',
        'logs',
        'done_videos',
        'failed_uploads',
        'temp'
    ]
    
    for directory in dirs:
        os.makedirs(directory, exist_ok=True)
        print(f"{bcolors.OKGREEN}‚úì{bcolors.ENDC} Dossier cr√©√©: {directory}")

def configure_global_settings():
    """Configure les param√®tres globaux"""
    print(f"\n{bcolors.BOLD}üåç CONFIGURATION GLOBALE{bcolors.ENDC}")
    print(f"{bcolors.OKBLUE}Remplissez les param√®tres applicables √† toutes les cha√Ænes{bcolors.ENDC}")
    
    config = {
        'default_source_dir': input("\nüìÇ Dossier source des vid√©os [D:/Videos]: ") or "D:/Videos",
        'whisper_model': input("üîä Mod√®le Whisper (base/small/medium/large) [medium]: ") or "medium",
        'deepseek_api_key': input("üß† Cl√© API DeepSeek: "),
        'publish_hours': [9, 12, 15, 18, 21],
        'log_retention_days': int(input("üìÜ Jours de r√©tention des logs [30]: ") or 30),
        'min_ram_gb': 8,
        'min_vram_gb': 4,
        'state_file': "publishing_state.json"
    }
    
    with open('config/app_config.yaml', 'w') as f:
        yaml.dump(config, f, sort_keys=False)
    
    print(f"{bcolors.OKGREEN}‚úì Configuration globale sauvegard√©e!{bcolors.ENDC}")
    return config

def configure_channel():
    """Configure une cha√Æne YouTube individuelle"""
    print(f"\n{bcolors.BOLD}üì∫ CONFIGURATION D'UNE CHA√éNE YOUTUBE{bcolors.ENDC}")
    
    channel = {
        'name': input("\nNom de la cha√Æne: "),
        'channel_id': input("ID de la cha√Æne (commence par UC...): "),
        'token_file': input("Nom du fichier token [token_chaine1.json]: ") or "token_chaine1.json",
        'daily_limit': int(input("Nombre de vid√©os par jour [3]: ") or 3)
    }
    
    # Options avanc√©es
    if input("\nConfigurer des options avanc√©es? (y/n): ").lower() == 'y':
        channel['source_dir'] = input("Dossier source sp√©cifique (laisser vide pour utiliser le global): ") or None
        channel['done_dir'] = input("Dossier pour vid√©os trait√©es [done_videos]: ") or "done_videos"
        channel['error_dir'] = input("Dossier pour vid√©os en √©chec [failed_uploads]: ") or "failed_uploads"
        channel['category_id'] = input("Cat√©gorie YouTube [27=√âducation]: ") or "27"
        channel['default_language'] = input("Langue par d√©faut [fr]: ") or "fr"
    
    return channel

def configure_channels():
    """Configure plusieurs cha√Ænes YouTube"""
    channels = []
    channel_count = 1
    
    while True:
        print_header()
        print(f"\n{bcolors.BOLD}Cha√Æne #{channel_count}{bcolors.ENDC}")
        channel = configure_channel()
        channels.append(channel)
        channel_count += 1
        
        if input("\nAjouter une autre cha√Æne? (y/n): ").lower() != 'y':
            break
    
    # Sauvegarder les configurations
    for i, channel in enumerate(channels):
        filename = f"config/channels/channel_{i+1}.yaml"
        with open(filename, 'w') as f:
            yaml.dump(channel, f, sort_keys=False)
        print(f"{bcolors.OKGREEN}‚úì Configuration sauvegard√©e: {filename}{bcolors.ENDC}")
    
    # Cr√©er un template
    if channels:
        with open("config/channels/channel_template.yaml", 'w') as f:
            yaml.dump(channels[0], f, sort_keys=False)
    
    return len(channels)

def setup_authentication():
    """Guide l'utilisateur pour l'authentification Google"""
    print(f"\n{bcolors.BOLD}üîê CONFIGURATION AUTHENTIFICATION GOOGLE{bcolors.ENDC}")
    print(f"\n{bcolors.WARNING}√âTAPES REQUISES:{bcolors.ENDC}")
    print("1. Allez sur https://console.cloud.google.com/")
    print("2. Cr√©ez un projet et activez l'API YouTube Data v3")
    print("3. Configurez l'√©cran de consentement OAuth")
    print("4. Cr√©ez des identifiants OAuth 2.0 (Type: Application bureautique)")
    print("5. T√©l√©chargez le fichier client_secret.json")
    print("\nPlacez le fichier t√©l√©charg√© dans le dossier 'auth/'")
    
    input("\nAppuyez sur Entr√©e quand c'est fait...")
    
    # V√©rifier la pr√©sence du fichier
    if not os.path.exists('auth/client_secret.json'):
        print(f"{bcolors.FAIL}‚ùå Fichier client_secret.json introuvable!{bcolors.ENDC}")
        return False
    
    return True

def generate_initial_state():
    """G√©n√®re le fichier d'√©tat initial"""
    state = {
        "last_processed_date": datetime.now().strftime("%Y-%m-%d"),
        "channel_dates": {}
    }
    
    with open('publishing_state.json', 'w') as f:
        json.dump(state, f, indent=2)
    
    print(f"{bcolors.OKGREEN}‚úì Fichier d'√©tat g√©n√©r√©!{bcolors.ENDC}")

def final_instructions():
    """Affiche les instructions finales"""
    print(f"\n{bcolors.BOLD}‚úÖ CONFIGURATION TERMIN√âE AVEC SUCC√àS!{bcolors.ENDC}")
    print("\nProchaines √©tapes:")
    print("1. Authentifiez chaque cha√Æne avec:")
    print("   python src/main.py --authenticate")
    print("2. Lancez l'automatisation:")
    print("   python src/main.py")
    print("\nPour modifier la configuration:")
    print("- √âditez les fichiers dans config/")
    print("- Ou relancez ce script")

def main():
    print_header()
    print(f"{bcolors.OKBLUE}Ce script va vous guider dans la configuration compl√®te de Vortex-Automator{bcolors.ENDC}")
    
    # Cr√©er la structure de dossiers
    create_directory_structure()
    
    # Configuration globale
    global_config = configure_global_settings()
    
    # Configuration des cha√Ænes
    channel_count = configure_channels()
    
    # Configuration d'authentification
    if not setup_authentication():
        print(f"{bcolors.FAIL}‚ùå Configuration d'authentification incompl√®te!{bcolors.ENDC}")
        sys.exit(1)
    
    # Fichier d'√©tat initial
    generate_initial_state()
    
    # Instructions finales
    final_instructions()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nConfiguration annul√©e.")
        sys.exit(0)